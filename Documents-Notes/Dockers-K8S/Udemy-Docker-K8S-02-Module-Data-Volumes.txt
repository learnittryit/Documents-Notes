1.  Docker file - when we build the code using docker file , code is copied into the image.
	Images are read only
	Containers can be read to/from using cp command
2. Data - 3 types 
	Read Only	- therefore stored in images
	Read +Write+Temporary - stored in containers
	Read+Write+Permanent - Stored with containers and volumes
3. Since :
	image - has its own file system
	container	- has its own file system , any change here will not reflect in your source code or image
	
		================Basic Concepts================
		
1. There is no connection between image , container or local file system.
2. But while pushing image , there is a connection between your image and the base image , therefore it says layer exists		
3. Be careful while removing containers- all the containers from same image are isolated from each other and have their own file systems

	Once the container is removed everything is removed.
	container removed - file system is also removed , all data is cleared
	container stop - file system remains and hence the data is retained in the container		

Problem statement - obviously containers will be often removed and created , as images will be updated. So we do not want to loose the 
					data of the old container
What is the solution - Volumes <Built in features of docker >
	Volumes are folder on HDD mounted into containers or mapped into containers  or made accessible into containers
		Kunal - "Means mere computer ka folder mounted hai container mein"
		
4.
------------------------------------------
	Volumes - Named and Anonymous
------------------------------------------ 
2 types of external storages - there are storage mechanisms:
	Volumnes - managed by dockers
		-Anonymous Volumes - ye volume ka naam docker decide kerta hai randomly .. thats the reason its v big
			imp- with unnamed volumes once container is stopped then the volume is deleted , this is not the case with named volumes
			key difference - Anonymous volumes are recreated whenever the containers are created and are deleted once container shuts down
							However the named volumes remains on HDD even if the containers does not exist
		-Named Volumes - Named volumes reamins on the HDD.So its a great deal of use as the data is persisted via a container 
			and cannot be edited directly
			/**
				Named volume need not to be mentioned in docker file why? becuase it is on HDD
				step1- remove #VOLUME["containerFolder"] - from Dockerfile
				step2- its mentioned in the command of docker continer
					(i) add -v which is volume in docker run command
					(ii) Syntax= [folder_name_we_choose:folder_inside_container] -- to remember its just like port 
						......>[-p myport:container ---> similerly -v my_folder_name:container_folder_name]
						 - we will give folder name of our choice --followed by colon -- then the path inside the container which we want to save 
							[mera_naam:contianer_ka_naam]
					(iii) Final Command - make sure to add -v and give the "-v folderName:containerFolderName" always when we hit the run command
						so that it always refer to the volume specified
				final command is : >docker run -p 3000:80 --rm --name kc -d -v kunalFeedbackVolume:/app/feedback feedback-app:namedvolume
				"imp is -v"			
			**/
		>commands are "docker volumes"  , location we will provide 
		
	Bind Mounts - managed by you or us		




5. 	--------------
	Bindmounts
	--------------
Understanding  -
	 just like dev tools in spring ,make change its reflected . Little bit different , devtools restart and make
	the change available but this just reflects change without starting container.
	We already know - container and images all have their different file systems
						volumes is a HDD:container mapping memory
Problem statement -
				 If anything changes in files , it will obviously not reflected on UI i.e basically running container , 
				unless we build image and make container out of it.So the development cycle slows down. To address this we have BindMounts
Solution is Bindmounts -
	 make a change in a file and see on running container	
--------------------------------
Difference Very important Kunal--: 
---------------------------------
	Volumns - managed by docker and docker saves somwhere on HDD
				1. anonymous volume is mentioned in docker file , hence is although specific to container but is controlled by image
				2. named volume - its specific to container , and nothing is mentioned in docker file HDD:containerLocation is
					provided while docker run ""-v hdd:/container_location"".
	Bindmount - 1. managed by developer and we set the absolute path , 
				2. its specific to a container not an image, hence detailes provided at command line while runing container
	----
	Note Command : command of volume and bindmount is exactly same only difference is absolute path vs volume name
	Very Important - docker must have an access to the your folder --> 
		steps : -->go to docker -->see preferences then-->see file sharing , your parent folder is must
	----
	1. Commands
		stlye1- where remove is in end [Basically removed is in end]
			 Command : docker run -p 1000:80 -v "/Users/user/Desktop/Docker and Kubernetes_Udmy/data-volumes-01-starting-setup:/app" --rm --name kc feedback-app:namedvolume
			 it will throw an error , since the command executed thrown error and container stopped 
			 container will then reached --rm and removed.
			----- Throw error and then remove container 		
		stlye2-  : where remove is in starting [Basically removed is in start]
		 docker run -d --name kc --rm -p 1000:80 -v "/Users/user/Desktop/Docker and Kubernetes_Udmy/data-volumes-01-starting-setup:/app" feedback-app:namedvolume				
		(Only position difference)
		error came and container is shutdown and removed in the start only , hence no error is printed in console, but we can see logs
		------- remove container immidetaly and no error
		
		style3-: dont use --rm , and see the logs of unremoved and stopped contaner 
		>docker logs containerName/id
		
	2. Kunal note I have added -v "path:/container_entire_folder" in double quots , so that there is no error in case of space or 
		special character - Its a good practice
					Very Important - docker must have an access to the your folder --> 
					steps : -->go to docker -->see preferences then-->see file sharing , your parent folder is must
	3. shortcuts if we dont want to write the path always
		macOS / Linux: -v $(pwd):/app
		Windows: -v "%cd%":/app					
		
		
	4. 	==== 
		-v used both for bindmount and for volumes
		====	
	
	5. npm install command in docker file will install inside the container and not on the local machine.
	Important understaning :
		a. Docker will not override our local folder even in volumes and in bindmounts
		b. Bindmount se hum kya ker rahein hain ...
			b1.-> We are binding everything in our local folder with the app folder in container 
			, means change kero local mein sab kuch reflect hoga container mein. basically binding hoo gyee
			But good part is docker kuch hi override nahin kerta local mein . If we make changes in local its 
			reflected on container ,but container cannot move back and delete anything in local. ye apna control mein hai.
			CRUX - "The container folder is always overriden by out local folder"	
			
			b.2 Problem Statement - Since bindmount will override container , and we installed npm node inside container , but we did not
			install it on localhost machine ,and nothings comes back from container to localhost , everything is acceible from localhost
			to container . 
				>	Therefore npm installed on container but was not copied or installed on the local machine
				> now we override everything from localhost to container, as otherway round is not allowed
				> therefore error appeared , since local host also removed node from container as it was not present in the local host
					and localhost cannot be overriden
			b.2 Solution : We need to tell docker that some parts on container should not be overridern
				Steps : We have to add another volume i.e anonymous volume

				Anonymous Volume useful -- Use-case when anonymous volume is useful.		 	
				How to achieve it :
				Style 1-	Either add in docker file 
						style one in Dockerfile and this is recommended
							VOLUME ["/app/node_modules"]
				Style 2-	OR add in cmd prompt run command
							> docker run -v /app/node_modumes {Note no name is given as no colon nameedVolume:/app/node_modules}
		======================
		Very Very Important start
		---------------------
		1. Volume - Container's data is "stored" in Volume
		(Volume sirf data hold kerta hai)
		2. Bindmount - Binding happens , Volume data is "accessible" inside the continaer
		(Container isko access kerta hai)
		
		======================
		Very Very Important end
		---------------------
		


		================Basic Concepts================
		
===========
	Volumes
===========		
Volumes ==> Just the folders holding data , and these folders are mapped / mounted into containers
	
	Host Computer - Mera Mac		Container
	[/folder_in_my_laptop]<---------[/app/user_data/into_container]	
Note to remember - this is not a online accessible folder , its just a one time snapshot once the container is created.
-----------------s		with either :
						docker run OR
						docer build
						Once the image is build that one time snapshot is simply copied to container .
						It does not mean if you make any change , it will automatically be reflected inside container.
						Container will only show the data from snapshot created once image is  either build or container is run.
						
Why Volume> - 	 are there to persist the data . Even when the container is shut down or container is removed.
-----------		Containers can read/write data from Volumnes
				
				#VOLUME -to persist data from inside container to outside contianer
				VOLUME ["/containers_folder_name"] 
				keyword hai VOLUME
				arguments mein container mein folder ka naam de do ... means inside folder will be mapped to outside folder
				where inside folder is folder in container and outside folder is folder on host system means mera laptop
				
Meaning - > 1. Volume ek folder hai jismein data persist kerna hai				
			2. Mount outside folder into container i.e inside container file systme, we have to add a keyword in the docker file as
				VOLUME ["path_of_files_folders_inside_container"]
				
=======
ERRRORS
=======				

1. UnhandledPromiseRejectionWarning: Unhandled promise rejection
	Error: EXDEV: cross-device link not permitted, rename '/app/temp/first.txt' -> '/app/feedback/first.txt'
	
	
========
Commands
========
1. Command Explained --

user@Users-Air ~ % docker run -p 2000:80						: Basic run command with port local:container
					-d --rm --name kc1							: detach , remove container once stopped , name of the container
					-v kunalFeedbackVolume:/app/feedback 		: named volume where the content will be stored name:path_in_container_to_be_saved
					-v "/Users/user/Desktop/Docker and Kubernetes_Udmy/data-volumes-01-starting-setup:/app"
					  											: bindmount volume with path_on_comp:folder_of_container
					-v /app/node_modules feedback-app:namedvolume
					   											: anonymous volume so that we can skip the copy of specic folder or
					   												module as needed by container but not present at local host.
					   											Matlab - node is installed in container from docker image , but may
					   														not be present on local machine , hence while running node
					   														container installed in retained and not accessed from local.
					   														Sirf aur sirf hum node ko nahin access kereinge from bindmount i.e local host
					   														rest hum sab kuch kereinge , and node we will take from container only.	
					-v /app /app/node_modules feedback-app:namedvolume:ro - :ro means read only, but this can be overriden by anonymous
																			volume
					-v name_of_container_folder_file : now this v is anonymous , even if the entire folder as above is read only , but this
														particular folder will still be able to read-write	
					-v /app/temp 	: means temp is also not a read only or has a precedence now. keep on adding anonymous and give a 
										priority
										
	Note Kunal - Anonymous kaafi powerful hai , agar koi restriction nahin lagani to simply anonymous bana do.		
	To override must specifically be written in commandline and not in the docker file -v /app/temp etc																																			 
																				   														




CRUX - we can give -v multiple times in a docker run command but each -v has a purpose
	1. -v anonymous name  "/container_path" -  a. once container is removed , this is removed too . Hence is not good fit for sharing data
												across containers . "single container volume".No need to hold all the data in contianer
												outsource it to a host system. Help performance improvement, as data is managed outside
												and not inside container
												b. tied to specific container , once container removed its gone
	2. VOLUME["/container_path"] in docker file, same as point-1
	3. -v local_name_only:container_folder_path - a. named volume is "general" volume , and not tied to specific container
												  b. Can be shared across containers , and hold data unlike anonymous volume.	
	4. -v "real_path_on_host_machine:/container_path" : this is for bind mount
		bindmount can use the existing volume or may not need the existing volume.
	5. Volume Purpose - save data once container is down or even removed , we can access same volume and access data. But actually 
						everything is in container, but data is saved in volume
	6. Bindmount - everyting is accessed from the bindmount even the processes and files and data also. So any change made will be
					 reflected online or to a running container.
	7. Bindmount should not copy all , therefore we use anonymous volume in this case. Anonymous means we will have a anonymous
		volume and it will always override or given precedence over named volume or bindmount.That is the reason the node is not needed
		to be installed as it will be picked from anonymous volume
	
	Volume se data access hota hai , chahe bindmount user kero ya na kero				 
	8. But if you make change to java or js files , then you have to just stop start.
	9. -v anonymous will always have precedence 
		-v add kero and then override ker sakte ho kuch bhi
	10. volume - docker manages 
		bind count - developer manages
	11. docker manage volume means -
		Answer - docker create a volume once container run. However we can also create a volume using "create command"
		>docker volume create volume_name , now we can also use this volume 
			e.g > docker run -p 2020:80 -v volume_name:path_on_container image_name
	(matlab ya apna volume banaker naam dedo yaa docker ko banae do , koi farak nahin padta)
	12. Bind mount is only for lacal use and not in production as production we do not have a source code
		In production we always have a snapshot of the code.
			COPY .. in docker file is not required if we use bind count , but only in developers envirenment , hence COPY .. 
				is always to be kept in docker file
				>docker run -p 8080:80 image:no-copy but not recommented
	13. dockerignore file - to specify files or folders which should not be copied by docker via COPY instruction in a docker file	
		Question Why do we need dockerignore file:
		Answer  1. We dont want to copy files and folders through COPY instruction
				2. simply mention folder / files here and no need to use anonymous volume to have a preedence over bind mount 
					instructions e.g read only all but not just one folder,  which  we explicitly have to write in anonymous -v
					command . instead simply add in dockerignore file
				
--------------------
READ-ONLY VOLUMES
--------------------

1. By default containers are read write
2. We can make volumes as read only , by simply adding ":ro" - i.e colon ro after the container_path
>docker run -p 3000:80 --rm --name name_of_container -v "volumename:/path_of_container:ro" image_name
	simply added :ro
	
3. now no further info can be stored in container. It only affects container and the application running inside the container to 
not allow the furhter update of volume by container and application running inside it		

4. Idea here is container should not be able to change anything on the host system, only we should be able to do so.
5. But keep in mind we may not need to retrict verything, so what all we do not want to restrict , we will again use a concept of
	anonymous volume. "Bhai jab bhi precedence deni hai over restrictedness use anonymous approach becuase it has a priority"
	default container =read-write
	:ro make it read only
	
	Very imp kunal:
	If we add > docker run -v "path/localhost:/path_container:ro" 		- this makes entire folder read only
						   -v /app/feedback 							- this will still not be read only and will be rad write as its 
						   													anonymous and hence has a priority
						   														
	command is : pay attention to last -v /app/temp this is also anonymous now so its also exempted
	user@Users-Air ~ % docker run -p 3000:80 -d --rm --name kc -v kunalFeedbackVolume:/app/feedback -v "/Users/user/Desktop/Docker and Kubernetes_Udmy/data-volumes-01-starting-setup:/app:ro" -v /app/node_modules 
	-v /app/temp feedback-app:namedvolume
	This must be specified in command line and not in docker file						   													
						   													
	
	
Just a learning 
--------------
1. Node have dependency nodemon which is equivalent to devtools of spring								 

----------------------
When to use what
----------------------



==========================================
ARGuments and ENVIronmental variables

ENVIRONMENT VARIABLES
--
(1)--env or -e = Both are same 		-> when environmental variables are passed from CLI
(2) --env-file ./.path_file_name 						-> when environmental variables are passed from FILE
(3) ENV in docker file
	E.g ENV PORT 80
ARGUMENT VARIABLES
--
(1) ARG in the docker file and give any name
(2) --build--args in the CLI
	E.g ARG PORT_ARG 80
		ENV PORT $ARG	

Argument is a value and port is a variable to which this value is assigned

Wrong -->ARG ARGUMENT_NAME_PORT = 80  Mistake is we cannot have space between assignments , error is thrown
Correct -->ARG ARGUMENT_NAME_PORT=80 
		
==========================================
1. Docker supports:
	a. ARGUMENTS	- BUILDTIME 
	b. ENVIRONMENT VARIABLES	- RUNTIME 
Kunal -- > Mere hisaab se essentially dono values hi pass kerti hai , ek build time per and ek compile or runtime per.
	therefore build docker file mein hai and env can be docker or command line 
2. 	ARGUMENTS :
	a. Only available in docker file not in application code or cmd
	b. set during docker build i.e basically image build via "--build-args"
	Jo bhi --build-args mein pass kereinge docker tile mein replace ho jayega same like in linux we give $1.
	
3. ENVIRONMENT VARIABLES : (Ab runtime per hum port pass keringe , build nahin kerni image)
	Available in docker file as well as running application code	
	set via (a) ENV in docker file
			(b) --env in docker run 
			(c)Kunal Important
				(i) ENV allow the change of containers port dynamically at creation of container with --env PORT=8000
				Why useful ? Because you dont need to build image again just to change the environment valriables , e.g 
				Production may have different and dev different .
				Steps :
					step-1. In docker file add ENV variable and assign any variable which you will pass at runtime 
						eg. ENV PORT 80		=> just initializing a ENV variable to 80
							EXPOSE $PORT   => variable name is PORT which will be passed from cli
					step-2. Pass from CLI a different port say 699
						> docker run -p	3000:699 --env PORT=699  => see here we have assigned PORT a different value.	 
					step-3. We can also pass multiple environment values e.g 
						(a)In docker ENV SIT, ENV DB
						(b) > docker run -p 3000:6000 --env PORT=6000  -env SIT=SITC3 -e DB=DB2 etc
						means env/e followed by space decide kerta hai variable and name , just a basic observation "-e space PORT=3" 	

3.1 We can also specify a file which may contain all the environment variables . Obviously this is very useful
e.g dev.env or .env

--env - pass kero variables 
--env-file /complete_file_path_name 
			
4. Useful -
	(a.) Make flexible images during either build image or run container dynamically			
	(b.) may be we want a docker file w.r.t environment during docker run e.g PROD / SIT / DEV and want to set some arguments dynamically during build using --build-args
	









	