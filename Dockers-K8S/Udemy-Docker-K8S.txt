1. Dockers - containers banana hai , thats it.
Docker is just a tool , khel to saara containers ka hi hai.

2. We have 2 options:	
	a. docker.file - to make a container , and we can use this file to launch a container , a new container.
	b. docker image - which anyway is needed and will be formed , we can use this same image and can use it anywhere
	
	Architecture is  [ OS has --[Container Support] it has--[docker engine]] -- ye sirf understanding hai
	
3. Docker Toolbox and Docker Tool box , just brings the docker engine on the non-linux envieonment
	On Linux - we can directly install docker engine 
4. VM vs Docker -
	VM - its a machine inside another machine , and all the configurations has to be done again and again
	, more memory consuming , always same setup to be done on another machines and may can cause an error.
	
5. Kya kya install hota hai 
	>  Docker Engine
	> (Docker Desktop) Docker Deamon + CLI
	> Docker Hug - need to host our images in the cloud
	> Docker Compose - Important 
	
6. In VM code editor , 2 extensions are good to have
Visual Studio Code --> Goto View and then extensions
	prettier extension - formatting
	docker extension	
			
==============================================

1. docker file entries :

	FROM node:14	- this says we wanna use node.js as a base image
	WORKDIR /app	-  directory in the "container" file system, every container has its own file system 
	COPY package.json . - here we copy out container file into our working directory as above line .
	RUN npm install - now this install all the dependencies 
	COPY . .	- copy rest all 
	EXPOSE 3000 - exposing an application to the outside world with port 3000
	CMD [ "node", "app.mjs" ]		- execute using node command
	
	Commands
	===========================================
	1. Build an image in the directory 
		cd /docker_file_directory
		> docker build . , matlab iss directory mein ji docker file hai use build kero

	/***** docker run / start explained starts		************************************** /
		
		
	2. docker run - "Creates" + "Run" the new container 
	docker run -p 3000:3000 image-id
		-p port
		3000:3000 > it means we publish port 3000(first 3000, this is on will application is exposed) on port 3000(this is of continaer)
		
		Explanation - There is no communication between localhost and container, therefore we need to open up a port on the container
		to which we want to communication , therefore this is often seen port1:port1 e.g 3000:3000 are same , it oly say publish or open 
		same port on the container , so communication via container can be done
		
		
		docker run -p 3000:80 0108749351f9
			where 3000 is an application port of our local machine
			where 80 is a port of the container , if we specify the "EXPOSE 80" in the docker file
			where -p means publish on ports , publish on local machine at port 3000 and on container at port 80
				Basically jab container run kerega then inside container 80 port per chalega , but locally expose 3000 port per hoga
				Duniya ke liye mein 3000 per hon , per container per actually mein 80 per hon
	
	2.1 - No need to create a new container if nothing changes , we can restart the old containers
			it does not block the terminal as docker run does , so we can continue running further commands
			> docker start container_id / container_name	
			
	Concept - I can run the same image locally on different port [new port means new container]
				
			First I ran on port 4000
					docker run -p 4000:3000 image-id
			Second I ran on port 9090
						docker run -p 9090:3000 image-id		
			Note up : container ports did not change but the local machine port is changed . This means I have run another container
			on another port , using the same image	
			
	docker run is a attached mode - terminal is stuck
		Attached means simply we are listeneing the output of the container
	docker start is an detached mode  - we can continue working on terminal
	
	2.2 - " -d " we can also run the docker in the detached mode 		
	> docker run -p localPort:containerPort -d image  
	2.3 "attach" - again attach the detached mode
	> docker attach 
	>docker log container_id / container_name -f = it also attach the container
	
	Note -d = detached mode
		-a = attached mode 
		e.d restart container = > docker start -a container_name_Or_Id
		/***** docker run / start explained ends**************************************/			
		
		
	3. docker stop container_id or container_names    Hum containers to start / stop / run kerte hain na ki images ko
	4. docker ps (process status) 	- give the status of all the processes and from here we can choose container id to be stopped
	5. docker ps only shows current runing processes
	6. docker ps -a = shows all the processes even previously ran
		6.1 docker ps --help	 
	
	 
		basically its running a container	
		it has port on which image is to be exposed to outside world , so we have to publish that port on the container, which we want 
		to run . 
			Run the container
			therefore we have to publish that port on container.
			So when container runs it allow users to hit on the respective port on which its supposed to be exposed
			
			
	7. docker --help
	8. remove images > docker rmi / docker prune
	9. >dokcer images - Listing all the images
	10. docker logs container_name/container_id - to see container specific logs   			
	11. > docker volume --help
			docker volume rm volume_name 	
			docker volume ls 
	===========================================		
	
	
	
	
	================
	Core Concepts
	================
	
	1. Images and Containers - Images are needed to make containers
	2. Data Volume in COntainers - how container holds so much of data even if shut down
	3. Containers-networking - Hoe multiple containers communicate with each other
	
	
	============================
		Images and Containers
	============================
	Use existing or make new images , run and bring up containers
	
	
	[Image]	- 
		1. "static unit of software"
		2. Template / Blueprint of container 
		3. It actually is sab kuch in static mode [ Application+Code+Tools+runtimes+plugins everyting]
	[container] - 
		1. sabkuch hai everthing [ Application, basically an entire environment to run the application]
		2. "Running unit of software"
		
		Core Concept and understand is :
			Best part is - we can use a single image to make multiple containers 
			[
				 	ek image aneek containers which can run on different
					machines and different servers
			]
			Matlab from one static setup we have multiple running setups .
			simply "docker run" - it creates a container , else its a simple image only.
			running image is a container 
		
	
		--------"CONTAINER = RUNNING INSTANCE OF A IMAGE"-------
	
	
	4. Docker hub - kid of git hub , thats it
		a.  navigate in any folder and run 
			>> docker run image_name
				What run will do , simply create a container based on the image "image_name"
	
	5. docker ps -a
		-a means all
		ps process status , it shows all the processes containers
	6. REMOVE CONTAINERS / IMAGES
		Containers - rm
		Images - rmi
		>docker rm container_id_OR_name_1 container_id_OR_name_2 container_id_OR_name_3 
		: we have to stop the running containers , else we cannot remove them
		: we can pass multiple container names at once
		
		>docker rmi image_id (Note rm is appended with i , i stands for image)
			: -f for force removal
			> docker rmi -f image_id
		Note -  a. this deletes an image and all the layers inside the image , therefore rmi shows multiple deletes
				b. images attached to the containers can not eaisly be removed , we have to either remove the containers or we have to
					forcefully remove the images
					
		6.1 docker image prune 
			will remove all unsued images			 
		
	7. docker run -it node 
		-it - means we want to expose an interactive session from inside the container	
	
	Why interactive session -E.g interactive shell exposed by the node is not automatically exposed by the container
	 Just like node , some applications are not automatically exposed by the container , so needs an interactive session
	like node , so that it can expose the shell. 
	
	8. docker build .  > just build the image and not run the image i.e not create the container . "Dot" means the current directory
		building an image means setting up an environment and downloading an image, so as to run it .
		build simply means ab meine image bana di
		
		 
	9. docker images / docker images -a > this will simply list all the images
	10. Interactive terminal , which takes input and output
		Note we can combine 2 options or can writ seperately 
		E.g > combined => docker run -it image_name
			  seperate => docker run -i -t image_name
			  i = interactieve session
			  t = psudo terminal of container , which interact with out input and respond
			  
	11 Restart in interactive mode (t is not needed, t is only needed during running)
		> docker start -i container_id			  	{Note start is always container , run is image becuase run creates a container}
			"run an image" - because run is (start+create)
			"start a container" - start is re-start
			
	12. We dont have to bother to remove image , it should be removed once the container stops , use -rm in run command
	> docker run -d -rm imageName
		-d detach , -rm remove once container is stopped 
	13. inspect - to inspect an image as well as container
		>docker image inspect image_id
		>docker inspect container_id_name
NOTE -All docker image general command is > docker image action imageid / docker images

	14. cp - copy files or folders ,  to and from container once its already running			
	Important point here is we are copying from and to "running container". No need to rebuild image
	Its not a verygood solution though, becuase already execuing files in container can bring issues 
		------------------------	
		To Container ------> docker cp source destination
		------------------------
		> docker cp source_foler_or_file/. destination_where_to_copy[container_name:/folder_name_inside_container]
			docker cp specific_file container_name:/folder_name
			docker cp folder/. - everyting in the folder

		------------------------		
		From Container ------> docker cp source destination
		------------------------
	
	
	15. Naming images and containers - TAG images 
		--name > means run a container with the name I have given , since run also create+start a container
		> docker run -p 9090:80 -d --rm --name continaer_name image_id
		
			TAG consist of 2 parts -->[Name:Tag] -> TAG is just a release name or number or an image
				e.g kunal:v1
					kunal:v2
					
	NOTE- in docker file we can write "FROM BASEIMAGENAME:TAG" , just to specify which version of image is needed				
						
	16. -t = adding "name:tag"
	NOTE - we specify the tag when we build the image
		> docker build -t image_name .
		
	17. push / pull images
	>docker pull image_name - if no tag is given then the default tagged image is pulled
	>docker push image_name 
	Important points :
	1. Make sure image name is repository name kunalrai1005/repositoryCumImageName
	Question - build or use tag command
		1. Build : before pushing simply build again and make clone, means all images will have same image id and you can delete all with one id 
		2. tag command : tag command creates a clone of the image with the desired name.
			[
			 Image ID remains same of original image id
			 name and tag can be added to the cloned image so it can be pushed eaisly.
			]
			docker tag fromimage toImage -> just add colon fromImage " SPACE" To_Image_As_Per_Repository
	a. Means repository must be present for the image to be pushed
	b. Local image name must be same as repository name
	
	
	
	
				 
	============================================================
	
	
	================================================
		Create an image of an application
	================================================
	
	Now I have an application , mere paas meri application hai , mujhe apni application ki image banani hai....
	
	Steps to create your own image :
	s1 - go to application folder where you have to create your own image
	s2 - create a new file "becuase an image is basically make from commands written in a file caller docker file "Dockerfile"
		Dockerfile is a special name identified by a docker , this is a file containing all the instructions to build our own image
	s3 - First line is 
	s3.1	first instruction 
			"FROM baseImage" ---> (upper case not allowed FROM baseimage:tagname)
	NOTE : VeryIMPORTANT -> Mein apni image bana rhaa hon using this base image,FROM baseimage:tag 
			now if we do ">docker images" we will see our image
			where from means I want to make my image using baseImage as whatever name we give . This should be either 
			locally present or on the docker hub
			e.g FROM node , from is in CAPS => now there is an image called node 
	s3.2	second instruction
			"COPY ..""    - dot means copy everything where docker file lives
				COPY - tells which all files are needed in the image , 
					fist	 dot =[Host filesystem]- means consider all the files/folders everything in the folder to be a part of the image 
					second dot=[image/container_filesystem]	- internal file system where all the files will be stored from the host system 
					Note - its not a good practice to consider the root folder in the container file system , rather
						have a meaningful name e.g /app
			"COPY ./app"	 - second dot is replaced by /app - this folder will simply be created in the image and container		
	s3.3	third instruction  - after copying everything from local file system to image , run the below command so we can proceed with 
							 instalment
			"RUN npm install"
					so now all the commands will be executed in app folder as we have given , actually by default everything is 
					executed in root , but since we have given an instruction in second step to go in app folder therefore it 
					all to be executed in app folder
					
			Important - in second step instead of giving ./app , we can do below 2 strps
	(This can be a second command therefore repeated s3.2)
	> s3.2	WORKDIR /app
			COPY ../ - "./" - tells that the working directory would be /app
			But recommented style is "COPY ./app"		 						  	 
	
	> s3.4 EXPOSE 80 
		This is a containers port which is obviously separate than the port of our local machine, now the container will listen on this
		port
	
	Remember Docker file is just a template to run the container and setting up an image , it is not suppose to be carry a run 
	command inside , Run has to be done explicitly
	s3.4 CMD node server.js 
	
	Difference between CMD and RUN 
		> RUN will always run the image , run is executed
		> CMD will only run when the container is loaded 
	
	
	====================
		BASIC CONCEPT
	====================
1. 	Therefore inside the Dockerfile we never use run , we use only CMD , so that in order to actually run the entire image 
	If no CMD is given then the CMD of the base image is executed , and if baseimage also does not have then error
	when the actual container runs then only the application run is executed	
2. CMD should be the last instruction in the docker file
3. Docker is awesome , not only for Web based application even simple utility applications e.g .py applications etc
4. Since we can make containers out of images , we normally do not share containers , rather we share images
5. How to share image, below are the  ways : ya docker file de do and build it , docker run - ya vo fetch kerlega from docker hub no 
	explicit build 
	1. docker file - simply share the docker file
		docker build dockerfile
	2. docker run , no build needed->image name , which is automallily pulled from repository- docker run image_name which is present in public repository
		docker run image_name - download image and build image and run the container

6. Push Pull from docker hub in public or private repository
	a. Repository must be present at dockerhub before pushing an image
	b. image name locallly must be same as repository name on the dockerhub
	c. Repository is a (box)dubba and tag is a version 
	[
		 means in one box there could be many versions 
		 but image name locally to be pushed must match the repository name on docker hub 
	]
	E.g - docker push kunalrai1005/learning_courses:v1
		  The push refers to repository [docker.io/kunalrai1005/learning_courses]	 
	
	
 7. dockerignore - dockerignore file tells , which all files should not be copied by COPY command in the docker file
  dockerignore file - to specify files or folders which should not be copied by docker via COPY instruction in a docker file  	
  
 8. Always pay an attention where to keep the instruction in the docker file , because all the subsequent layers are reformed after change.
 so keep the changes which will not change on the top 
	====================
		BASIC CONCEPT
	====================	
	
	====================
		Lecture 25 - Images are layer based
	====================	
1. Every instruction result in a docker file is a layer , so if nothing is changed in the result of the instructions , 
		then  cached instruction is used and may be cached values are fetched . 
		
		[ container run - another layer - which is final layer based on the image	
			[
				instruction3 -image layer 3
				instruction2 -image layer 2 ==> Image (Read Only - means cannot change unless its rebuild)		
				instruction1 -image layer 1
			]
		
		]
		[
			FROM node					instruction-1
			WORKDIR app					instruction-2
			COPY . ./					instruction-3
			RUN npm install node		instruction-4 -- > This need not to install always , 
			EXPOSE 80					instruction-5
			CMD [ "node","server.js" ]	instruction-6
		]
	Important note if one layer changes , all the below or subsequent layers will be re-executed and hence can take more time.
	Therefore write the set of instructions carefully
	
	
	e.g we can change the above instruction as 
	[	
			RUN npm install node		instruction-4 -- > This need not to install always , therefore I have interchanged . Becuase 
															COPY may change files and hence all the below layers will be executed
															but install need not to run again		
			COPY . ./					instruction-3
		
	]
	
		
		
	
	
	
	
	